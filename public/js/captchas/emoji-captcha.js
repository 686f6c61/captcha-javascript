/**
 * M√≥dulo de CAPTCHA de emojis
 * Presenta preguntas simples con opciones de emojis donde el usuario debe seleccionar
 * los emojis que coincidan con la categor√≠a solicitada.
 * 
 * Este CAPTCHA ayuda a verificar que eres humano al identificar correctamente
 * los emojis que pertenecen a una categor√≠a espec√≠fica.
 */

const EmojiCaptcha = (function() {
    // Configuraci√≥n del CAPTCHA
    const CATEGORIES = {
        animals: {
            name: 'animales',
            emojis: ['ü¶Å', 'üêò', 'ü¶í', 'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'üê§', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ó', 'üï∑', 'ü¶Ç', 'ü¶Ä', 'ü¶ë', 'üêô', 'ü¶ê', 'üê†', 'üêü', 'üê°', 'üê¨', 'ü¶à', 'üê≥', 'üêã', 'üêä', 'üêÜ', 'üêÖ', 'üêÉ', 'üêÇ', 'üêÑ', 'ü¶å', 'üê™', 'üê´', 'üêò', 'ü¶è', 'ü¶ç', 'üêé', 'üêñ', 'üêê', 'üêè', 'üêë', 'üêï', 'üê©', 'üêà', 'üêì', 'ü¶É', 'üïä', 'üêá', 'üêÅ', 'üêÄ', 'üêø', 'ü¶î', 'üêâ', 'üê≤']
        },
        food: {
            name: 'alimentos',
            emojis: [
                // Frutas
                'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'üçç', 'ü•ù', 'ü•ë', 'üçÖ', 'ü••',
                // Verduras y hortalizas
                'ü•î', 'ü•ï', 'üåΩ', 'üå∂', 'ü•í', 'ü•¨', 'ü•¶', 'üçÑ', 'üßÖ', 'üßÑ', 'ü•ú', 'üå∞',
                // Pan y l√°cteos
                'üçû', 'ü•ê', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'ü•õ', 'üçº', 'üßà', 'ü•û',
                // Carnes y pescados
                'ü•©', 'üçó', 'üçñ', 'ü•ì', 'ü•©', 'ü•ì', 'üç≥', 'üßÜ', 'ü•ò', 'ü•ô',
                // Comida r√°pida
                'üå≠', 'üçî', 'üçü', 'üçï', 'üåÆ', 'üåØ', 'ü•™', 'ü•ó', 'üçù', 'üçú',
                // Comida internacional
                'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'üç§', 'üçô', 'üçö', 'üçò', 'üç•',
                // Postres y dulces
                'üç°', 'üçß', 'üç®', 'üç¶', 'ü•ß', 'üç∞', 'üéÇ', 'üßÅ', 'ü•Æ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™',
                // Bebidas
                '‚òï', 'üçµ', 'üç∂', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üçæ', 'üßÉ', 'ü•§', 'üßã',
                // Utensilios
                'ü•Ñ', 'üç¥', 'üçΩ', 'ü•¢', 'üßÇ', 'ü•°', 'üßä'
            ]
        },
        vehicles: {
            name: 'veh√≠culos',
            emojis: ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèé', 'üöì', 'üöë', 'üöí', 'üöê', 'üöö', 'üöõ', 'üöú', 'üõ¥', 'üö≤', 'üõµ', 'üèç', 'üö®', 'üöî', 'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü', 'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá', 'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©', 'üí∫', 'üõ∞', 'üöÄ', 'üõ∏', 'üöÅ', 'üõ∂', '‚õµ', 'üö§', 'üõ•', 'üõ≥', '‚õ¥', 'üö¢', '‚öì', '‚õΩ', 'üöß', 'üö¶', 'üö•', 'üöè', 'üó∫', 'üóø', 'üóΩ', 'üóº', 'üè∞', 'üèØ', 'üèü', 'üé°', 'üé¢', 'üé†', '‚õ≤', 'üèñ', 'üèù', '‚õ±', 'üèú', 'üåã', '‚õ∞', 'üèî', 'üóª', 'üèï', '‚õ∫', 'üè†', 'üè°', 'üèò', 'üèö', 'üèó', 'üè≠', 'üè¢', 'üè¨', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè®', 'üè™', 'üè´', 'üè©', 'üíí', 'üèõ', '‚õ™', 'üïå', 'üïç', 'üïã', '‚õ©', 'üõ§', 'üõ£', 'üóæ', 'üéë', 'üèû', 'üåÖ', 'üåÑ', 'üå†', 'üéá', 'üéÜ', 'üåá', 'üåÜ', 'üèô', 'üåÉ', 'üåå', 'üåâ', 'üåÅ']
        },
        sports: {
            name: 'deportes',
            emojis: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'ü•Ö', 'üèí', 'üèë', 'üèè', '‚õ≥', 'üèπ', 'üé£', 'ü•ä', 'ü•ã', '‚õ∏', 'üéø', '‚õ∑', 'üèÇ', 'üèãÔ∏è', 'ü§∫', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§æ', 'üèåÔ∏è', 'üèá', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üöµ', 'üö¥', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñ', 'üèµ', 'üéó', 'üé´', 'üéü', 'üé™', 'ü§π', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 'ü•Å', 'üé∑', 'üé∫', 'üé∏', 'üéª', 'üé≤', 'üéØ', 'üé≥', 'üéÆ', 'üé∞']
        },
        objects: {
            name: 'objetos',
            emojis: ['üì±', 'üì≤', 'üíª', '‚åö', '‚åõ', '‚è∞', '‚è±', '‚è≤', '‚è≥', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéô', 'üéö', 'üéõ', 'üìΩ', 'üéû', 'üìπ', 'üé¨', 'üì∑', 'üì∏', 'üìº', 'üìπ', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üìΩ', 'üé•', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéô', 'üéö', 'üéõ', 'üìΩ', 'üéû', 'üìπ', 'üé¨', 'üì∑', 'üì∏', 'üìπ', 'üìΩ', 'üé•', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéô', 'üéö', 'üéõ', 'üìΩ', 'üéû', 'üìπ', 'üé¨', 'üì∑', 'üì∏', 'üìπ', 'üìΩ', 'üé•']
        }
    };

    const EXPLANATIONS = [
        "Selecciona todos los emojis que pertenezcan a la categor√≠a mostrada. Esto ayuda a verificar que eres humano.",
        "Elije solo los emojis que coincidan con la categor√≠a solicitada. Puede haber m√°s de una respuesta correcta.",
        "Demuestra que eres humano seleccionando los emojis que correspondan a la categor√≠a indicada.",
        "Para continuar, selecciona todos los emojis que pertenezcan a la categor√≠a mostrada.",
        "Ay√∫danos a mantener el sitio seguro seleccionando los emojis correctos seg√∫n la categor√≠a."
    ];

    // Generar preguntas din√°micamente
    function generateQuestions() {
        const questions = [];
        const categories = Object.keys(CATEGORIES);
        
        // Crear 3 preguntas por categor√≠a
        categories.forEach(category => {
            const categoryData = CATEGORIES[category];
            const allEmojis = [...new Set(categoryData.emojis)]; // Eliminar duplicados
            
            // Crear 3 variaciones de cada categor√≠a
            for (let i = 0; i < 3; i++) {
                // Mezclar emojis
                const shuffled = [...allEmojis].sort(() => 0.5 - Math.random());
                
                // Seleccionar entre 3 y 5 respuestas correctas
                const correctCount = Math.min(3 + Math.floor(Math.random() * 3), shuffled.length);
                const correct = shuffled.slice(0, correctCount);
                
                // Seleccionar opciones incorrectas (asegurando que no est√©n en las correctas)
                const incorrect = Object.values(CATEGORIES)
                    .filter(cat => cat.name !== categoryData.name)
                    .flatMap(cat => cat.emojis)
                    .filter(emoji => !correct.includes(emoji));
                
                // Mezclar opciones incorrectas y tomar las necesarias
                const incorrectOptions = [...new Set(incorrect)]
                    .sort(() => 0.5 - Math.random())
                    .slice(0, 9 - correctCount); // Total de 9 opciones (6-8 correctas + 1-3 incorrectas)
                
                // Crear pregunta
                questions.push({
                    question: `Selecciona los ${categoryData.name}`,
                    correct: correct,
                    options: [...correct, ...incorrectOptions].sort(() => 0.5 - Math.random()),
                    explanation: EXPLANATIONS[Math.floor(Math.random() * EXPLANATIONS.length)]
                });
            }
        });
        
        return questions.sort(() => 0.5 - Math.random()); // Mezclar todas las preguntas
    }
    
    const QUESTIONS = generateQuestions();

    // Variables de estado
    let currentQuestion = null;
    let attempts = 0;
    const maxAttempts = 3;
    let callbacks = {};
    let container = null;
    let selectedEmojis = []; // Almacena los emojis seleccionados por el usuario

    /**
     * Obtiene una pregunta aleatoria
     */
    function getRandomQuestion() {
        return QUESTIONS[Math.floor(Math.random() * QUESTIONS.length)];
    }

    /**
     * Crea el HTML del CAPTCHA
     */
    function render(containerElement) {
        container = containerElement;
        container.innerHTML = '';
        
        // Obtener pregunta aleatoria
        currentQuestion = getRandomQuestion();
        
        // Crear elementos del DOM
        const captchaElement = document.createElement('div');
        captchaElement.className = 'emoji-captcha';
        captchaElement.style.textAlign = 'center';
        captchaElement.style.padding = '20px';
        captchaElement.style.borderRadius = '8px';
        captchaElement.style.backgroundColor = '#f8f9fa';
        captchaElement.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
        captchaElement.style.maxWidth = '400px';
        captchaElement.style.margin = '0 auto';

        // A√±adir explicaci√≥n
        const explanationElement = document.createElement('div');
        explanationElement.textContent = currentQuestion.explanation || EXPLANATIONS[0];
        explanationElement.style.fontSize = '0.9em';
        explanationElement.style.color = '#666';
        explanationElement.style.marginBottom = '15px';
        explanationElement.style.fontStyle = 'italic';
        captchaElement.appendChild(explanationElement);

        // A√±adir pregunta
        const questionElement = document.createElement('div');
        questionElement.textContent = currentQuestion.question;
        questionElement.style.fontSize = '1.2em';
        questionElement.style.margin = '0 0 15px 0';
        questionElement.style.fontWeight = 'bold';
        captchaElement.appendChild(questionElement);

        // Crear contenedor de opciones
        const optionsContainer = document.createElement('div');
        optionsContainer.style.display = 'grid';
        optionsContainer.style.gridTemplateColumns = 'repeat(2, 1fr)';
        optionsContainer.style.gap = '10px';
        optionsContainer.style.margin = '20px 0';

        // Mezclar opciones
        const options = [...currentQuestion.options].sort(() => Math.random() - 0.5);
        selectedEmojis = []; // Reiniciar selecci√≥n

        // A√±adir botones de opciones
        options.forEach(emoji => {
            const button = document.createElement('button');
            button.textContent = emoji;
            button.dataset.emoji = emoji;
            button.style.fontSize = '2em';
            button.style.padding = '15px';
            button.style.border = '2px solid #ddd';
            button.style.borderRadius = '8px';
            button.style.background = 'white';
            button.style.cursor = 'pointer';
            button.style.transition = 'all 0.2s';
            button.style.opacity = '0.8';
            
            button.onclick = () => toggleEmojiSelection(button, emoji);
            optionsContainer.appendChild(button);
        });

        // Bot√≥n de verificaci√≥n
        const verifyButton = document.createElement('button');
        verifyButton.textContent = 'Verificar';
        verifyButton.style.marginTop = '20px';
        verifyButton.style.padding = '10px 20px';
        verifyButton.style.fontSize = '1em';
        verifyButton.style.backgroundColor = '#4CAF50';
        verifyButton.style.color = 'white';
        verifyButton.style.border = 'none';
        verifyButton.style.borderRadius = '4px';
        verifyButton.style.cursor = 'pointer';
        verifyButton.onclick = verifySelection;
        optionsContainer.appendChild(verifyButton);

        // Contenedor de mensajes
        const messageElement = document.createElement('div');
        messageElement.style.marginTop = '15px';
        messageElement.style.minHeight = '24px';
        messageElement.style.fontWeight = 'bold';

        // Contador de intentos
        const attemptsElement = document.createElement('div');
        attemptsElement.style.marginTop = '10px';
        attemptsElement.style.fontSize = '0.9em';
        attemptsElement.style.color = '#666';
        
        // Funci√≥n para actualizar el contador de intentos
        function updateAttemptsDisplay() {
            attemptsElement.textContent = `Intentos restantes: ${maxAttempts - attempts}`;
        }
        
        updateAttemptsDisplay();

        // Funci√≥n para alternar la selecci√≥n de un emoji
        function toggleEmojiSelection(button, emoji) {
            const index = selectedEmojis.indexOf(emoji);
            if (index === -1) {
                // A√±adir a la selecci√≥n
                selectedEmojis.push(emoji);
                button.style.border = '2px solid #4CAF50';
                button.style.background = '#e8f5e9';
                button.style.opacity = '1';
            } else {
                // Quitar de la selecci√≥n
                selectedEmojis.splice(index, 1);
                button.style.border = '2px solid #ddd';
                button.style.background = 'white';
                button.style.opacity = '0.8';
            }
        }

        // Funci√≥n para verificar la selecci√≥n
        function verifySelection() {
            if (selectedEmojis.length === 0) {
                messageElement.textContent = 'Por favor, selecciona al menos un emoji.';
                messageElement.style.color = '#f39c12';
                return;
            }

            // Deshabilitar botones
            const buttons = optionsContainer.querySelectorAll('button');
            buttons.forEach(btn => {
                btn.disabled = true;
                btn.style.cursor = 'not-allowed';
            });

            // Verificar respuestas
            const correctAnswers = [...currentQuestion.correct];
            const isCorrect = selectedEmojis.length === correctAnswers.length &&
                           selectedEmojis.every(emoji => correctAnswers.includes(emoji));

            // Resaltar respuestas correctas e incorrectas
            buttons.forEach(btn => {
                if (btn.textContent === 'Verificar') return;
                
                const emoji = btn.dataset.emoji;
                if (correctAnswers.includes(emoji)) {
                    btn.style.border = '2px solid #4CAF50';
                    btn.style.background = selectedEmojis.includes(emoji) ? '#e8f5e9' : '#ffebee';
                } else if (selectedEmojis.includes(emoji)) {
                    btn.style.border = '2px solid #f44336';
                    btn.style.background = '#ffebee';
                }
                btn.style.opacity = '1';
            });

            if (isCorrect) {
                // Respuesta correcta
                messageElement.textContent = '¬°Correcto! Has seleccionado las respuestas correctas.';
                messageElement.style.color = '#4CAF50';
                
                if (callbacks.onSuccess) {
                    setTimeout(() => callbacks.onSuccess(), 1000);
                }
            } else {
                // Respuesta incorrecta
                attempts++;
                messageElement.textContent = 'Incorrecto. Intenta de nuevo.';
                messageElement.style.color = '#f44336';
                
                if (attempts >= maxAttempts) {
                    messageElement.textContent = 'Demasiados intentos fallidos. Intenta de nuevo.';
                    if (callbacks.onError) {
                        callbacks.onError('Demasiados intentos fallidos');
                    }
                } else {
                    // Habilitar botones para otro intento despu√©s de un breve retraso
                    setTimeout(() => {
                        buttons.forEach(btn => {
                            if (btn.textContent !== 'Verificar') {
                                btn.disabled = false;
                                btn.style.cursor = 'pointer';
                                btn.style.opacity = '0.8';
                                if (!correctAnswers.includes(btn.dataset.emoji)) {
                                    btn.style.border = '2px solid #ddd';
                                    btn.style.background = 'white';
                                }
                            }
                        });
                        messageElement.textContent = '';
                        selectedEmojis = [];
                    }, 1500);
                }
                updateAttemptsDisplay();
            }
        }


        // A√±adir elementos al contenedor principal
        captchaElement.appendChild(optionsContainer);
        captchaElement.appendChild(messageElement);
        captchaElement.appendChild(attemptsElement);
        container.appendChild(captchaElement);
    }

    /**
     * Crea una nueva instancia del CAPTCHA de emojis
     */
    function createCaptcha(containerElement, callbacksObj = {}) {
        callbacks = callbacksObj;
        attempts = 0;
        render(containerElement);
        
        return {
            reset: function() {
                attempts = 0;
                render(container);
            }
        };
    }

    // Devolver la funci√≥n de creaci√≥n del CAPTCHA
    return {
        createCaptcha: createCaptcha
    };
})();

// Exportar como variable global
window.EmojiCaptcha = EmojiCaptcha;
